[{"categories":null,"content":"Golang标准库中提供了互斥锁Mutex的原语来解决并发资源竞争，这篇文章探讨了标准库 中Mutex的实现原理 ","date":"2020-12-14","objectID":"/posts/go_mutex/:0:0","tags":null,"title":"Golang Mutex源码分析","uri":"/posts/go_mutex/"},{"categories":null,"content":"基础知识 ","date":"2020-12-14","objectID":"/posts/go_mutex/:1:0","tags":null,"title":"Golang Mutex源码分析","uri":"/posts/go_mutex/"},{"categories":null,"content":"信号量 信号量Semaphore 是计算机科学家 Dijkstra 发明的数据结构，是在多线程环境下使用的一种设施，是可以用来保证两个或多个关键代码段不被并发调用。其本质是一个整数，有两个基本操作： 申请acquire（也称为 wait、decrement 或 P 操作）: 将信号量减 1，如果结果值为负则挂起协程，直到其他线程进行了信号量累加为正数才能恢复。如结果为正数，则继续执行。 释放release（也称 signal、increment 或 V 操作）: 将信号量加 1，如存在被挂起的协程，此时唤醒他们中的一个协程。 ","date":"2020-12-14","objectID":"/posts/go_mutex/:1:1","tags":null,"title":"Golang Mutex源码分析","uri":"/posts/go_mutex/"},{"categories":null,"content":"CAS 操作 CAS操作是CPU指令提供的一个原子操作， 其全程为 Compare And Swap，在Go标准库 sync/atomic 中实现了这个方法： // CompareAndSwapInt32 executes the compare-and-swap operation for an int32 value. func CompareAndSwapInt32(addr *int32, old, new int32) (swapped bool) 这个函数会首先比较指针addr指向的值是否和old是否相等，如果相等则将addr指向的值替换为new，并返回true， 否则不做任何操作，并返回false。 ","date":"2020-12-14","objectID":"/posts/go_mutex/:1:2","tags":null,"title":"Golang Mutex源码分析","uri":"/posts/go_mutex/"},{"categories":null,"content":"Mutex的第一次提交 在2008年 Russ Cox 提交了第一版的Mutex实现[1]， 当时的实现比较简单，我们先从这一版开始了解Mutex的底层原理，由于当时Go还未发布1.0版本，也没有sync/atomic包，与现在的实现有很大的区别，但这并不影响我们理解其中的逻辑 ","date":"2020-12-14","objectID":"/posts/go_mutex/:2:0","tags":null,"title":"Golang Mutex源码分析","uri":"/posts/go_mutex/"},{"categories":null,"content":"Mutex的定义 export type Mutex struct { key int32; // 记录当前锁是否被某个goroutine持有 sema int32; // 信号量 } 初版的Mutex定义非常简单，使用key记录当前锁是否被持有，sema记录当前信号量 ","date":"2020-12-14","objectID":"/posts/go_mutex/:2:1","tags":null,"title":"Golang Mutex源码分析","uri":"/posts/go_mutex/"},{"categories":null,"content":"加锁的实现 func (m *Mutex) Lock() { if xadd(\u0026m.key, 1) == 1 { // 将标记加1，判断是否有其他goroutine持有锁 // changed from 0 to 1; we hold lock return; // 当前 goroutine 持有锁，直接返回 } sys.semacquire(\u0026m.sema); // 挂起当前goroutine，等待调度 } 这个函数实现的很简单，在加锁时，首先将当前锁标记为已持有，如果当前锁没有被其他goroutine持有，则直接返回， 否则，挂起当前goroutine，等待信号量调度。 xadd函数 func xadd(val *int32, delta int32) (new int32) { for { // 不断自旋操作 v := *val; if cas(val, v, v+delta) { // 判断是否被其他goroutine修改 return v+delta; // 返回新值 } } panic(\"unreached\") } xadd通过自旋CAS操作，将val的值加delta，就相当于现在Go语言的atomic.AddInt32 ","date":"2020-12-14","objectID":"/posts/go_mutex/:2:2","tags":null,"title":"Golang Mutex源码分析","uri":"/posts/go_mutex/"},{"categories":null,"content":"解锁的实现 解锁的实现也很简洁: func (m *Mutex) Unlock() { if xadd(\u0026m.key, -1) == 0 { // 将标记减1 // changed from 1 to 0; no contention return; // 如果没有其他goroutine持有锁，直接返回 } sys.semrelease(\u0026m.sema); // 通过信号量唤醒被挂起的goroutine } 解锁时，首先将当前标记减一，如果当前锁没有被其他goroutine持有，则直接返回， 否则，通过信号量通知运行时，调度被挂起的goroutine。 在这个版本，Mutex已经实现了基本的功能，但是这个版本有一个问题，所有goroutine会排队等待 运行时的调度，虽然这保证了公平性，所有的goroutine都会有机会参与调度，但是从性能的角度上看， 这会导致频繁的上下文切换，如果我们把锁直接交给新人(未挂起的goroutine)，这样就可以避免上下文的切换， 于是Go 团队再 Go1.0 正式版时对Mutex进行了较大的调整。 ","date":"2020-12-14","objectID":"/posts/go_mutex/:2:3","tags":null,"title":"Golang Mutex源码分析","uri":"/posts/go_mutex/"},{"categories":null,"content":"Go 1.0中Mutex的实现 咕咕咕… ","date":"2020-12-14","objectID":"/posts/go_mutex/:3:0","tags":null,"title":"Golang Mutex源码分析","uri":"/posts/go_mutex/"},{"categories":null,"content":"C++11 添加了右值引用的特性，不仅让我们能够使用移动语义，而且 还可以通过完美转发编写接收任意实参的模板 ","date":"2020-12-12","objectID":"/posts/c++_rvalue/:0:0","tags":null,"title":"C++ 与 右值引用","uri":"/posts/c++_rvalue/"},{"categories":null,"content":"左值与右值 在 C++ 中，一切值都分为左值lvalue和右值rvalue 在 C 语言中，我们把等号左边的称为左值，等号右边的称为右值 int a = 0; // 这里0是右值,a是左值 int b = a;// 这里a是右值,b是左值 C++11 中的左值与右值 在 C++11 中，左值和右值的概念被重新解释 L-Value左值中的 L 被重新解释成 Location，即左值代表具有内存地址的一类表达式 R-Value右值中的 R 被重新解释成 Read，即右值代表具有只读的一类表达式 ","date":"2020-12-12","objectID":"/posts/c++_rvalue/:1:0","tags":null,"title":"C++ 与 右值引用","uri":"/posts/c++_rvalue/"},{"categories":null,"content":"右值引用 在C++98中，所有的引用都是左值引用，我们只能对左值取引用 int a = 0; int\u0026 p1 = a; // 合法 int\u0026 p2 = 0; // 非法操作，左值引用无法指向右值 const int\u0026 p3 = 0; // 合法，const引用可以指向右值 在C++11中，提供了右值引用的支持 int a = 0; int\u0026\u0026 p1 = 0; // 合法，右值引用指向右值 int\u0026\u0026 p2 = a; // 非法，右值引用指向左值 标准库中的std::move可以将左值强制转换为右值，例如 int a = 5; int\u0026\u0026 b = std::move(a); // 将左值转换为右值 std::cout \u003c\u003c a; // 输出为 5 std::move这个名字非常右迷惑性，虽然名字是move，但它并没有将一个变量中的值 移入到另一个变量当中，本质上执行的是static_cast\u003cT\u0026\u0026\u003e(lvalue)操作。 ","date":"2020-12-12","objectID":"/posts/c++_rvalue/:2:0","tags":null,"title":"C++ 与 右值引用","uri":"/posts/c++_rvalue/"},{"categories":null,"content":"移动语义 在 C/C++ 中，构造，返回，传参等等默认采用都的是拷贝copy的语义 int a,b; a = 5; b = a; 例如在这份代码中，对b赋值采用的方式是将先拷贝变量a，再将拷贝的临时变量赋值给b， 在变量结构复杂的情况下，复制操作的代价是非常高的，C语言中我们可以使用指针来处理这个问题， 但指针是非常危险的。 于是在 C++ 中，我们C++中可以使用引用，它的机制和指针类似，但是比指针更加安全，引用的 使用让我们可以在传参时使用得安全，快速方式，但并没解决返回和构造的拷贝问题。 在 C++ 11 中右值引用的出现，使得我们可以用移动move语义解决C++中的拷贝问题 (咕咕咕。。。) ","date":"2020-12-12","objectID":"/posts/c++_rvalue/:3:0","tags":null,"title":"C++ 与 右值引用","uri":"/posts/c++_rvalue/"},{"categories":null,"content":"(咕…) ","date":"2020-12-11","objectID":"/about/:0:0","tags":null,"title":"关于","uri":"/about/"},{"categories":null,"content":"Hello World 这是一个测试页面 ","date":"2020-12-06","objectID":"/posts/hello_world/:1:0","tags":null,"title":"Hello_world","uri":"/posts/hello_world/"}]